#include <stdio.h>
#include <stdlib.h>

void bubble_sort(int vet[],int n);

int main(){

int n,i;

printf("\nDigite N\n");
scanf("%d",&n);

int vet[n];

printf("\nDigite os numeros:\n");

for(i=0;i<n;i++){

    scanf("%d",&vet[i]);

    }

printf("\n");

for(int i=0;i<n;i++){

    printf(" %d ",vet[i]);

}


bubble_sort(vet,n);

printf("\nNumeros Ordenados\n");

for(int i=0;i<n;i++){

    printf(" %d ",vet[i]);

}


//*#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void bubble_sort(int vet[],int n);
void bubble_sortOrdemA(char nomes[],int k);

int main(){

int n,i;

printf("\nDigite N\n");
scanf("%d",&n);

int vet[n];

printf("\nDigite os numeros:\n");

for(i=0;i<n;i++){

    scanf("%d",&vet[i]);

    }

printf("\n");

for(int i=0;i<n;i++){

    printf(" %d ",vet[i]);

}


bubble_sort(vet,n);

printf("\nNumeros Ordenados\n");

for(int i=0;i<n;i++){

    printf(" %d ",vet[i]);

}

printf("\nDigite a quantidade de numeros:\n");

int k;

scanf("%d",&k);

char nomes[k][20];

for(i=0;i<k;i++){
    fgets(nomes[i],20,stdin);
}

printf("\nNomes: \n");

for(i=0;i<k;i++){
    printf("%s",nomes[i]);
}

bubble_sortOrdemA(nomes[k],k);

printf("\nNomes Ordenados: \n");

for(i=0;i<k;i++){
    printf("%s",nomes[i]);
}


return 0;


}
void bubble_sort(int vet[],int n){
    int i, j, aux;

    for (i = n-1; i>0; i--) {
        for (j = 0; j < i; j++) {
            if (vet[j] > vet[j + 1]) {
                aux = vet[j];
                vet[j] = vet[j+1];
                 vet[j+1] = aux;
            }
        }
    }

}

void bubble_sortOrdemA(char nomes[],int k){
    int i, j;
    char aux[20];

    for (i =k-1; i>0; i--) {
        for (j = 0; j < i; j++) {
            if ((strcmp(nomes[j],nomes[j+1]))>0) {
                strcpy(aux,nomes[j]);
                strcpy(nomes[j],nomes[j+1]);
                strcpy(nomes[j+1],aux);
            }
        }
    }

}



return 0;


}
void bubble_sort(int vet[],int n){
    int i, j, aux;

    for (i = n-1; i>0; i--) {
        for (j = 0; j < i; j++) {
            if (vet[j] > vet[j + 1]) {
                aux = vet[j];
                vet[j] = vet[j+1];
                 vet[j+1] = aux;
            }
        }
    }

}
