#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void merge_sort(int vet[],int l, int r);
void merge(int vet[], int l, int m, int r);

int main(){

int n, i,l=0, r;

printf("\nDigite N\n");
scanf("%d",&n);

r= n-1;

int vet[n];

printf("\nDigite os numeros:\n");

for(i=0;i<n;i++){

    scanf("%d",&vet[i]);

    }

printf("\n");

for(int i=0;i<n;i++){

    printf(" %d ",vet[i]);

}


merge_sort(vet,l,r);

printf("\n\nNumeros Ordenados\n");

for(int i=0;i<n;i++){

    printf(" %d ",vet[i]);

}





return 0;


}
void merge_sort(int vet[],int l, int r){

    int m;

    if(l<r){

    m = (r+l)/2;

    merge_sort(vet,l,m);
    merge_sort(vet,m+1,r);

    merge(vet,l,m,r);
    }
}

void merge(int vet[], int l, int m, int r){

int *aux, p1, p2, tam, i, j ,k;
int fim1=0, fim2=0;

tam = r-l+1;

p1 = l;
p2 = m+1;

aux = malloc(tam*sizeof(int));

if(aux!= NULL){
    for(i=0; i<tam; i++){

        if(!fim1 && !fim2){

            if(vet[p1] < vet[p2])
                aux[i]=vet[p1++];

            else
            aux[i]=vet[p2++];

            if (p1>m) fim1=1;
            if (p2>r) fim2=1;

            }else{

                if(!fim1)
                aux[i]=vet[p1++];

                    else
                        aux[i]=vet[p2++];

            }
    }
    for(j=0, k=l; j<tam; j++, k++)
        vet[k]=aux[j];
    }
    free(aux);
}





